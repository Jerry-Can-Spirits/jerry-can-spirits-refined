---
// src/pages/products.astro
import MainLayout from '../layouts/MainLayout.astro';

const products = [
  {
    id: "expedition-spiced",
    name: "Expedition Spiced",
    tagline: "Forged for the journey",
    story: "Expedition Spiced is a bold, intrepid spirit crafted for those who find comfort in the wild. It's a tribute to long nights under open skies and stories told around a fire. Not just a drink, but a provision for your next adventure.",
    tastingNotes: [
      { label: "Nose", description: "Aromatic smoke and a crack of black pepper" },
      { label: "Palate", description: "A robust, peppery warmth gives way to a smooth, surprising burst of clean citrus" },
      { label: "Finish", description: "A satisfying, warming finish with no harsh burn" }
    ],
    abv: "40%",
    volume: "700ml",
    klaviyoFormId: "YwAbEQ",
    image: "/products/expedition-spiced.jpg",
    available: false
  },
  {
    id: "quartermasters-reserve",
    name: "The Quartermaster's Reserve",
    tagline: "The essential standard",
    story: "This is the backbone of any serious collection—a classic, rich dark rum engineered for versatility. Smooth enough to stand alone over ice, yet bold enough to command any classic cocktail. It's the reliable old friend for the end of a long day.",
    tastingNotes: [
      { label: "Nose", description: "Rich molasses, dark chocolate, and a hint of oak" },
      { label: "Palate", description: "A smooth, full-bodied character with notes of dried fruit and vanilla" },
      { label: "Finish", description: "Clean, exceptionally smooth, and timeless" }
    ],
    abv: "42%",
    volume: "700ml",
    klaviyoFormId: "VrCGHG",
    image: "/products/quartermasters-reserve.jpg",
    available: false
  }
];
---

<MainLayout 
  title="Our Products" 
  description="The inaugural lineup of Jerry Can Spirits. Crafted with precision, built for adventure."
>
  <div class="products-page">
    <header class="page-hero">
      <div class="hero-content">
        <span class="page-label">Our Collection</span>
        <h1 class="page-title">The Inaugural Lineup</h1>
        <p class="page-description">
          The first provisions from the Jerry Can Spirits armoury. 
          Crafted with precision, built for adventure.
        </p>
      </div>
    </header>

    <main class="products-container">
      <div class="products-grid">
        {products.map((product, index) => (
          <article class="product-card" data-product-id={product.id}>
            <div class="product-image">
              <picture>
                <source 
                  media="(max-width: 768px)" 
                  srcset={product.image.replace('.jpg', '-mobile.jpg')}
                />
                <img 
                  src={product.image} 
                  alt={product.name}
                  loading="lazy"
                  width="400"
                  height="500"
                />
              </picture>
              {!product.available && (
                <div class="availability-badge">Coming Soon</div>
              )}
            </div>
            
            <div class="product-content">
              <div class="product-header">
                <span class="product-number">N°{String(index + 1).padStart(2, '0')}</span>
                <h2 class="product-name">{product.name}</h2>
                <p class="product-tagline">{product.tagline}</p>
              </div>
              
              <p class="product-story">{product.story}</p>
              
              <div class="product-specs">
                <span class="spec">
                  <strong>ABV:</strong> {product.abv}
                </span>
                <span class="spec">
                  <strong>Volume:</strong> {product.volume}
                </span>
              </div>
              
              <div class="tasting-notes">
                <h3 class="notes-title">Tasting Notes</h3>
                <ul class="notes-list">
                  {product.tastingNotes.map(note => (
                    <li class="note-item">
                      <strong class="note-label">{note.label}:</strong>
                      <span class="note-description">{note.description}</span>
                    </li>
                  ))}
                </ul>
              </div>
              
              <div class="product-actions">
                {product.available ? (
                  <button class="btn btn-primary">
                    Add to Cart
                  </button>
                ) : (
                  <button 
                    class="btn btn-notify" 
                    data-klaviyo-form-id={product.klaviyoFormId}
                  >
                    Notify Me When Available
                  </button>
                )}
              </div>
            </div>
          </article>
        ))}
      </div>
    </main>

    <section class="products-cta">
      <div class="cta-content">
        <h2>Can't Decide?</h2>
        <p>Join our crew for expert recommendations and exclusive first access to new releases.</p>
        <a href="#signup" class="btn btn-primary">Become an Insider</a>
      </div>
    </section>
  </div>

  <!-- Klaviyo Modal -->
  <div id="notify-modal" class="notify-modal" aria-hidden="true" role="dialog">
    <div class="modal-content">
      <button 
        id="modal-close" 
        class="modal-close" 
        aria-label="Close notification modal"
      >
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M18 6L6 18M6 6l12 12"/>
        </svg>
      </button>
      <div id="klaviyo-form-container"></div>
    </div>
  </div>
</MainLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('notify-modal');
    const modalClose = document.getElementById('modal-close');
    const formContainer = document.getElementById('klaviyo-form-container');
    const notifyButtons = document.querySelectorAll('.btn-notify');

    if (!modal || !modalClose || !formContainer) {
      console.error("Modal elements not found");
      return;
    }

    function openModal(klaviyoFormId: string | null) {
      if (!klaviyoFormId || !formContainer || !modal) return;
      
      // Set up Klaviyo form
      formContainer.innerHTML = `<div class="klaviyo-form-${klaviyoFormId}"></div>`;
      
      // Open modal with animation
      modal.classList.add('open');
      modal.setAttribute('aria-hidden', 'false');
      document.body.style.overflow = 'hidden';
      
      // Reload Klaviyo forms if the script is loaded
      if ((window as any).klaviyo) {
        (window as any).klaviyo.load();
      }
    }

    function closeModal() {
      if (!modal) return;
      
      modal.classList.remove('open');
      modal.setAttribute('aria-hidden', 'true');
      document.body.style.overflow = '';
      
      // Clear form container after animation
      if (formContainer) {
        setTimeout(() => {
          formContainer.innerHTML = '';
        }, 300);
      }
    }

    // Add click handlers to notify buttons
    notifyButtons.forEach(button => {
      button.addEventListener('click', () => {
        const formId = button.getAttribute('data-klaviyo-form-id');
        openModal(formId);
      });
    });

    // Close modal handlers
    modalClose.addEventListener('click', closeModal);
    
    modal.addEventListener('click', (event) => {
      if (event.target === modal) {
        closeModal();
      }
    });

    // Close on Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal.classList.contains('open')) {
        closeModal();
      }
    });

    // Add intersection observer for animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
        }
      });
    }, observerOptions);

    const cards = document.querySelectorAll('.product-card');
    cards.forEach(card => {
      observer.observe(card);
    });
  });
</script>